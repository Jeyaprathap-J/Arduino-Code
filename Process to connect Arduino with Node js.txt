Steps to Connect Node.js with Arduino Using serialport
Step 1: Prepare Your Arduino

	1.Open Arduino IDE:

		Connect your Arduino to your computer via USB.
		Launch the Arduino IDE.

	2.Upload a Sketch to Arduino:

		Write a simple sketch to communicate with the Node.js application. Hereâ€™s an example of a sketch that sends "Hello from Arduino" every second:

		#Code to enter in Arduino IDE
		void setup() {
		  Serial.begin(9600);  // Initialize serial communication at 9600 bits per second
		}

		void loop() {
		  Serial.println("Hello from Arduino");
		  delay(1000);  // Wait for a second
		}

		Upload this sketch to your Arduino.
	
Step 2: Set Up Node.js Environment

	1.Create a New Node.js Project:

		Open a terminal and create a new directory for your project.
		
		#Code to enter in VSCode terminal
		mkdir my-arduino-project
		cd my-arduino-project
		npm init -y
		
	2.Install serialport:

		Install the 'serialport' package using npm.
		
		#Code to enter in VSCode terminal
		npm install serialport
		npm install serialport @serialport/parser-readline
	
Step 3: Write Node.js Script to Communicate with Arduino
	1.Create a JavaScript File:

		Create index.js and open it in your text editor.
		
	2.Write the Script:

		Add the following code to index.js to read data from the Arduino:
		
		#Code to enter in index.js file
		const { SerialPort } = require('serialport');
		const { ReadlineParser } = require('@serialport/parser-readline');

		// Replace 'COM3' with the correct serial port for your system
		const port = new SerialPort({
		  path: 'COM3', // For Windows, e.g., 'COM3'; for macOS/Linux, e.g., '/dev/tty.usbmodem14101'
		  baudRate: 9600
		});

		const parser = port.pipe(new ReadlineParser({ delimiter: '\r\n' }));

		port.on('open', () => {
		  console.log('Serial port open');
		});

		parser.on('data', (data) => {
		  console.log(`Received data: ${data}`);
		});

		port.on('error', (err) => {
		  console.error('Error: ', err.message);
		});